name: CD Pipeline (Production)

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Backend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  deploy:
    name: Deploy to Hostinger
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOSTINGER_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Hostinger
        run: |
          ssh ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_SSH_HOST }} << 'EOF'
            echo "üîÑ Switching to project directory..."
            cd ${{ secrets.HOSTINGER_APP_DIR }} || exit 1

            echo "üõë Stopping running containers..."
            docker-compose down || true

            echo "‚¨áÔ∏è Pulling latest images..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest

            echo "üöÄ Starting application..."
            docker-compose up -d --force-recreate

            echo "üîç Checking if Xngine is running..."
            if pgrep xngine > /dev/null; then
                echo "‚úÖ Xngine is running. Restarting..."
                systemctl restart xngine || service xngine restart
            else
                echo "‚ö†Ô∏è Xngine is not running. Starting..."
                systemctl start xngine || service xngine start
            fi

            echo "‚úÖ Deployment complete!"
          EOF
